name: Build and Publish to PyPI

on:
  push:
    tags:
      - "v*"  # trigger on version tags (requires write access)
# example:
# git tag v1.0.0
# git push origin v1.0.0
# version must be manually updated in lmcache/_version.py

jobs:
  build-and-publish:
    name: Build wheels and Publish to PyPI
    runs-on: ubuntu-latest

    steps:
      - name: Remove toolcache to free space
        run: |
          sudo rm -rf /opt/hostedtoolcache || true
          df -h

      - name: Remove other cruft to free space
        run: |
          docker system prune -af || true
          sudo rm -rf ~/.cache || true
          df -h

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Verify tag matches setup.py version
        run: |
          TAG_VERSION="${GITHUB_REF#refs/tags/v}"
          SETUP_VERSION=$(grep '__version__' lmcache/_version.py | cut -d'"' -f2)
          if [ "$TAG_VERSION" != "$SETUP_VERSION" ]; then
            echo "Git tag version ($TAG_VERSION) does not match setup.py version ($SETUP_VERSION)"
            exit 1
          fi

      - name: Install packaging tools
        run: |
          python -m pip install --upgrade pip
          pip install build cibuildwheel twine

      - name: Clean dist/
        run: |
          rm -rf dist/

      - name: Build source distribution (no CUDA)
        run: |
          NO_CUDA_EXT=1 python -m build --sdist

      - name: Build CUDA wheels with cibuildwheel
        env:
          # this builds 3.10, 3.11, 3.12, 3.13 right now
          CIBW_BUILD: "cp3*-manylinux_x86_64"
          CIBW_SKIP: "pp*"
          # see https://developer.nvidia.com/cuda-gpus for compute capabilities
          # "CUDA-Enabled Datacenter Products"
          # 7.0: V100
          # 7.5: T4
          # 8.0: A100, A30
          # 8.6: A40, A10, A16, A2
          # 8.9: L4, L40, L40S
          # 9.0: H100
          CIBW_ENVIRONMENT: "TORCH_CUDA_ARCH_LIST='7.0;7.5;8.0;8.6;8.9;9.0'"
          CIBW_MANYLINUX_X86_64_IMAGE: "docker.io/apostab/manylinux-cuda124"
          CIBW_REPAIR_WHEEL_COMMAND_LINUX: >
            auditwheel repair
            --plat manylinux_2_17_x86_64
            --exclude libtorch.so
            --exclude libtorch_cuda.so
            --exclude libtorch_python.so
            --exclude libtorch_cpu.so
            --exclude libc10.so
            --exclude libc10_cuda.so
            -w {dest_dir} {wheel}
        # continue even if cibuildwheel fails since the wheels are probably
        # built even if some error messages show up
        run: |
          python -m cibuildwheel --output-dir dist || true

      - name: Upload dist/ as artifact
        uses: actions/upload-artifact@v4
        with:
          name: release-artifacts
          path: dist/

      - name: Publish to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: twine upload dist/*

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build-and-publish
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download built artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-artifacts
          path: dist/

      - name: Create GitHub Release + Upload Wheels
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          body: |
            Release generated from tag `${{ github.ref_name }}`.
            Built with CUDA 12.4 wheels and uploaded to PyPI.
          files: dist/*
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}